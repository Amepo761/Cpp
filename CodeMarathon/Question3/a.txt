void createBills(Bill *bills[SIZE]);

std::string GetInvoiceNumberOfHighestBillAmount(Bill *bills[SIZE]);

float GetBillAmountWithInvoiceNumber(Bill *bills[SIZE], std::string invoiceNumber);

Invoice** GetInvoicesWithBillAmount(Bill *bills[SIZE], float billAmount);

void FreeInvoices(Bill *bills[SIZE]);

void checkAllBillsEmpty(Bill *bills[SIZE]);

Invoice MaximumbillAmount(Bill *bills[SIZE]);

Invoice MinimumbillAmount(Bill *bills[SIZE]);
---------------------
// Function to create Objects
void createBills(Bill *bills[SIZE])
{
    bills[0] = new Bill(1000, 100, Invoice("INV001", InvoiceType::E_BILL, 100));
    bills[1] = new Bill(2000, 200, Invoice("INV002", InvoiceType::PAPER_SLIP, 200));
    bills[2] = new Bill(3000, 300, Invoice("INV003", InvoiceType::SMS_GENERATED, 300));
}

// function to get invoice number of highest Bill Amount
std::string GetInvoiceNumberOfHighestBillAmount(Bill *bills[SIZE])
{
    checkAllBillsEmpty(bills);

    int maxIndex = 0;
    for (int i = 1; i < SIZE; i++)
    {
        if (bills[i]->getBillAmount() > bills[maxIndex]->getBillAmount())
        {
            maxIndex = i;
        }
    }
    return bills[maxIndex]->getBillAssociatedInvoice().getInvoiceNumber();
}

//  Function to get Bill Amount whose invoice number is given
float GetBillAmountWithInvoiceNumber(Bill *bills[SIZE], std::string invoiceNumber)
{
    checkAllBillsEmpty(bills);

    for (int i = 0; i < SIZE; i++)
    {
        if (bills[i]->getBillAssociatedInvoice().getInvoiceNumber() == invoiceNumber)
        {
            return bills[i]->getBillAmount();
        }
    }
    throw std::runtime_error("Invoice number not found");
}

//  Which returns list of Invoices With invoice bill amount greater than given threshold bill Amount
Invoice **GetInvoicesWithBillAmount(Bill *bills[SIZE], float billAmount)
{
    checkAllBillsEmpty(bills);
    Invoice **invoices = new Invoice *[SIZE];
    int count = 0;
    for (int i = 0; i < SIZE; i++)
    {
        if (bills[i]->getBillAmount() >= billAmount)
        {
            invoices[count++] = new Invoice(bills[i]->getBillAssociatedInvoice());
        }
    }
    if (count == 0)
    {
        throw std::runtime_error("No invoices found");
    }
    return invoices;
}

//  Free Invoices()
void FreeInvoices(Bill *bills[SIZE])
{
    for (int i = 0; i < SIZE; i++)
    {
        delete bills[i];
    }
}

//  Checks if bills are empty
void checkAllBillsEmpty(Bill *bills[SIZE])
{
    //    If all are empty then throw exception
    for (int i = 0; i < SIZE; i++)
    {
        if (bills[i] != nullptr)
        {
            return;
        }
    }
    throw std::runtime_error("All bills are empty");
}

//  Function to get Invoice with Maximum Bill Amount
Invoice MaximumbillAmount(Bill *bills[SIZE])
{
    checkAllBillsEmpty(bills);

    int maxIndex = 0;
    for (int i = 1; i < SIZE; i++)
    {
        if (bills[i]->getBillAmount() > bills[maxIndex]->getBillAmount())
        {
            maxIndex = i;
        }
    }
    return Invoice(bills[maxIndex]->getBillAssociatedInvoice());
}

//  Function to get Invoice with minimum Bill Amount

Invoice MinimumbillAmount(Bill *bills[SIZE])
{
    checkAllBillsEmpty(bills);

    int minIndex = 0;
    for (int i = 1; i < SIZE; i++)
    {
        if (bills[i]->getBillAmount() < bills[minIndex]->getBillAmount())
        {
            minIndex = i;
        }
    }
    return Invoice(bills[minIndex]->getBillAssociatedInvoice());
}
------------------------
#include "Functionalities.h"
#include <iostream>

int main()
{
    std::cout << "Create Objects.....\n";
    Bill *bills[SIZE];
    Bill *exceptionBill[SIZE]={nullptr};
    try
    {
        createBills(bills);

        std::cout << "Get Invoice Number of Highest Bill Amount.....";
        std::cout << GetInvoiceNumberOfHighestBillAmount(bills) << "\n";
        std::cout << "Get Bill Amount with Invoice Number.....";

        std::cout << GetBillAmountWithInvoiceNumber(bills, "INV002") << "\n";
        std::cout << "Get Invoices with Bill Amount.....\n";
        Invoice **invoices = GetInvoicesWithBillAmount(bills, 2000);
        for (int i = 0; i < SIZE; i++)
        {
            if (invoices[i] != nullptr)
            {
                std::cout << *invoices[i] << "\n";
            }
        }
        std::cout << "Maximum Bill Amount.....\n";
        std::cout << MaximumbillAmount(bills) << "\n";
        std::cout << "Minimum Bill Amount.....\n";
        std::cout << MinimumbillAmount(bills) << "\n";
        std::cout << "Free Invoices.....\n";
        FreeInvoices(bills);
    }
    catch (const std::exception &e)
    {
        std::cerr << e.what() << '\n';
    }
}